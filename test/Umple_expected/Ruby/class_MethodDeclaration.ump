class UnitTest {
    class_MethodDeclaration <<!<</*class_MethodDeclaration*/>><<#
  // don't recheck for method being present: 
  // the for loop will terminate immediately even if there are none with little to no 
    for (Method aMethod : uClass.getMethods())
  	{
      String methodName = aMethod.getName();
      String methodType = aMethod.getType();
      String customPreconditionCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", aMethod.getName()+"Precondition"));
      String customPostconditionCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before", aMethod.getName()+"Postcondition"));
      customPostconditionCode = customPostconditionCode==null?"":customPostconditionCode;
        
      String methodBody;
      if (aMethod.getIsAbstract()) {
       methodBody = "fail NotImplementedError, \"Method, " + uClass.getName() + "." + methodName + ", must be implemented.\"";
      } else {
       methodBody = (aMethod.getMethodBody() != null) ? aMethod.getMethodBody().getExtraCode() : "";
      }

      String properMethodBody = "    " + methodBody;
    		
      String finalParams = "";
      StringBuilder parameters = new StringBuilder();
      if (aMethod.hasMethodParameters())
      {
        for (MethodParameter aMethodParam : aMethod.getMethodParameters()) 
        {
          String paramName = aMethodParam.getName();
          String aSingleParameter = paramName;
          parameters.append(aSingleParameter + ", ");
        }
        finalParams = parameters.toString().substring(0, parameters.toString().length()-2);
      }
        
      appendln(realSb, "");
      	
      if (aMethod.numberOfComments() > 0) { append(realSb, "\n  {0}\n", Comment.format("RubyMultiline Internal", aMethod.getComments())); }
    	
      append(realSb, "  def {0} ({1})\n", methodName, finalParams);
      
      if(!"".equals(customPostconditionCode))
      {
        if(!"".equals(methodType)&&!"void".equals(methodType)){
          append(realSb, "    result = {0}_original({1})\n", methodName, finalParams);
        }
        else {
          append(realSb, "    {0}_original({1})\n", methodName, finalParams);
        }
        appendln(realSb, GeneratorHelper.doIndent(customPostconditionCode, "    "));
        if(!"".equals(methodType)&&!"void".equals(methodType)){
          append(realSb, "    return result\n");
        }          
        appendln(realSb, "  end");
        append(realSb, "\n  def {0}_original({1})\n", methodName, finalParams);
      }
    	
      if (customPreconditionCode != null) { append(realSb, "\n{0}\n",GeneratorHelper.doIndent(customPreconditionCode, "    "));}
    	
      appendln(realSb, properMethodBody);
    	
	  appendln(realSb, "  end");
  }
#>>

!>>
}
