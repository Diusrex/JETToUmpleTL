use UmpleNotice.ump;
use import_packages_interface.ump;


external interface ILang {}


@SuppressWarnings("unused")
class RubyInterfaceGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;


    isA ILang;



  // Add a newline to the end of the input
  private void appendln(StringBuffer buffer, String input, Object... variables)
  {
    append(buffer, input + "\n", variables);
  }  

  // This method will be used to append formatted strings
  // i.e. format("Hello {0} {1}", "andrew","forward");
  private void append(StringBuffer buffer, String input, Object... variables)
  {
    buffer.append(StringFormatter.format(input,variables));
  }

  /* 
  * This method will return the generated code.
  */
  public String getCode(UmpleModel model, UmpleElement uElement)
  {
    return "";
  }


    // TODO: Replace <lastFunctionName> with the name of the function that is above this. Replace arguments as well.
        // That function can be removed
    emit <lastFunctionName>(arguments...)(rubyInterfaceGenerator);


    rubyInterfaceGenerator <<!<</*rubyInterfaceGenerator*/>><<@ UnitTest.UmpleNotice >>
<<#
  UmpleInterface uInterface = (UmpleInterface) uElement;
  // GeneratedInterface gInterface = uInterface.getGeneratedInterface();
  RubyGenerator gen = new RubyGenerator();
  gen.setModel(model);
  
  String extraCode = "";
  if (uInterface.getExtraCode() != null)
  {
    extraCode = uInterface.getExtraCode();
  }

#>>

<<=gen.translate("packageDefinition",uInterface)>><<@ UnitTest.import_packages_interface >>

class <<=uInterface.getName()>>
  <<=extraCode>>
end!>>
}