use constructor_AssociationAssignDefault.ump;
use constructor_AssociationAssignImmutableOptionalMany.ump;
use constructor_AssociationAssignImmutableOptionalN.ump;
use constructor_AssociationAssignImmutableOptionalOne.ump;
use constructor_AssociationAssignMandatoryMany.ump;
use constructor_AssociationAssignOne.ump;
use constructor_AssociationAssignOneToOne.ump;
use constructor_AssociationAssignOptionalMany.ump;
use constructor_AssociationAssignOptionalOne.ump;
use constructor_AssociationAssignUndirectionalOne.ump;
use constructor_AttributeAssign.ump;
use constructor_AttributeAssignAutounique.ump;
use constructor_AttributeAssignDefaulted.ump;
use constructor_AttributeAssignImmutable.ump;
use constructor_AttributeAssignLazy.ump;
use constructor_AttributeAssignList.ump;
use constructor_AttributeAssignUnique.ump;
use constructor_AttributeUnassignedImmutable.ump;
use constructor_NestedStateMachineAssignDefault.ump;
use constructor_StateMachineAssignDefault.ump;


class UnitTest {
    constructor_Declare_All <<!<</*constructor_Declare_All*/>><<#

  String customConstructorPrefixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("before","constructor"));
  String customConstructorPostfixCode = GeneratorHelper.toCode(uClass.getApplicableCodeInjections("after","constructor"));

  appendln(realSb, "");

  String accessibility = uClass.getIsSingleton() ? "private" : "public";
  append(realSb,"  def initialize({0})",new Object[] {gClass.getLookup("constructorSignature")});

  String extraNote = null;
    
  if (!uClass.isRoot())
  {
    appendln(realSb, "");
    append(realSb, "    super({0})", gClass.getParentClass().getLookup("constructorSignature_caller"));
  }

  append(realSb, "\n    @initialized = false");
  append(realSb, "\n    @deleted = false");
  
  if (customConstructorPrefixCode != null)
  {
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPrefixCode, "    "));
  }
  
  if (uClass.getKey().isProvided())
  {
    appendln(realSb, "");
    append(realSb, "    @cachedHashCode = -1");
  }
  
  for(String memberId : uClass.getKey().getMembers())
  {
    Attribute av = uClass.getAttribute(memberId);
    AssociationVariable as = uClass.getAssociationVariable(memberId);
    if (av != null  && !av.isImmutable())
    {
      appendln(realSb, "");
      append(realSb, "    @{0} = true", gen.translate("attributeCanSet",av));
    }
    else if (as != null)
    {
      appendln(realSb, "");
      append(realSb, "    @{0} = true", gen.translate("associationCanSet",as));
    }
  }   
  
  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique() || av.getIsUnique() || av.isConstant() || "theInstance".equals(gen.translate("attributeOne",av)) || av.getIsDerived())
    {
      continue;
    }
    
    if (av.getIsList())
    {
      #>><<@ UnitTest.constructor_AttributeAssignList >><<#
    }
    else if ("defaulted".equals(av.getModifier()))
    {
      #>><<@ UnitTest.constructor_AttributeAssignDefaulted >><<# 
    }
    else if (av.isImmutable() && av.getIsLazy())
    {
      #>><<@ UnitTest.constructor_AttributeAssignLazy >><<@ UnitTest.constructor_AttributeUnassignedImmutable >><<#
    }
    else if (av.isImmutable())
    {
      #>><<@ UnitTest.constructor_AttributeAssignImmutable >><<# 
    }
    else if(av.getIsLazy())
    {
       #>><<@ UnitTest.constructor_AttributeAssignLazy >><<#
    }
    else
    {
       #>><<@ UnitTest.constructor_AttributeAssign >><<#
    }
  }

  for (Attribute av : uClass.getAttributes())
  {
    if (av.getIsAutounique())
    {
      #>><<@ UnitTest.constructor_AttributeAssignAutounique >><<#
    }
    else if (av.getIsUnique())
    {
      #>><<@ UnitTest.constructor_AttributeAssignUnique >><<#
    }
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables())
  {
  	if (!av.getIsNavigable() || !av.isImmutable())
  	{
  	  continue;
  	}
    append(realSb, "\n    @{0} = true", gen.translate("associationCanSet",av));
  }
  
  for (AssociationVariable av : uClass.getAssociationVariables()) 
  {
    AssociationVariable relatedAssociation = av.getRelatedAssociation();
    
    if (!av.getIsNavigable())
    {
      continue;
    }
    
    if (!relatedAssociation.getIsNavigable())
    {
      if (av.isOnlyOne())
      {
        #>><<@ UnitTest.constructor_AssociationAssignUndirectionalOne >><<#
      }
      else if (av.isOptionalOne() && av.isImmutable())
      {
        #>><<@ UnitTest.constructor_AssociationAssignImmutableOptionalOne >><<#
      }
      else if (av.isMandatoryMany())
      {
        #>><<@ UnitTest.constructor_AssociationAssignMandatoryMany >><<#
      }
      else if (av.isOptionalN() && av.isImmutable())
      {
        #>><<@ UnitTest.constructor_AssociationAssignImmutableOptionalN >><<#
      }
      else if (av.isMany() && av.isImmutable())
      {
        #>><<@ UnitTest.constructor_AssociationAssignImmutableOptionalMany >><<#
      }
      else if (av.isMany())
      {
        #>><<@ UnitTest.constructor_AssociationAssignOptionalMany >><<#
      }
      else
      {
        #>><<@ UnitTest.constructor_AssociationAssignOptionalOne >><<#
      }
      continue;
    }
    
    if (av.isOnlyOne() && relatedAssociation.isOnlyOne())
    {
      #>><<@ UnitTest.constructor_AssociationAssignOneToOne >><<#
    }
    else if ((av.isMN() || av.isN()) && (relatedAssociation.isMandatory() || relatedAssociation.isOptionalN()))
    {
      #>><<@ UnitTest.constructor_AssociationAssignOptionalMany >><<#
    }
    else if (av.isOnlyOne())
    {
      #>><<@ UnitTest.constructor_AssociationAssignOne >><<#
    }
    else
    {
      #>><<@ UnitTest.constructor_AssociationAssignDefault >><<#
    }
  }
  
  for(StateMachine sm : uClass.getStateMachines())
  {
    State state = sm.getStartState();
    if (state == null)
    {
      continue;
    }
    #>><<@ UnitTest.constructor_StateMachineAssignDefault >><<#
    for (StateMachine nestedSm : sm.getNestedStateMachines())
    {
      #>><<@ UnitTest.constructor_NestedStateMachineAssignDefault >><<#
    }
  }
  
  if (customConstructorPostfixCode != null)
  {
    append(realSb, "\n{0}",GeneratorHelper.doIndent(customConstructorPostfixCode, "    "));
  }

  appendln(realSb, "\n    @initialized = true");
  append(realSb, "  end");
#>>!>>
}
