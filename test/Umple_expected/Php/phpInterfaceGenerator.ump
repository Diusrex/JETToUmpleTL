use UmpleNotice.ump;
use interface_AbstractMethodDeclaration.ump;
use interface_constantDeclaration.ump;


namespace cruise.umple.compiler.php;

external interface ILang {}


@SuppressWarnings("unused")
class PhpInterfaceGenerator {
    depend cruise.umple.compiler.*;
    depend cruise.umple.util.*;
    depend java.util.*;


    isA ILang;



  // Add a newline to the end of the input
  private void appendln(StringBuffer buffer, String input, Object... variables)
  {
    append(buffer, input + "\n", variables);
  }  

  // This method will be used to append formatted strings
  // i.e. format("Hello {0} {1}", "andrew","forward");
  private void append(StringBuffer buffer, String input, Object... variables)
  {
    buffer.append(StringFormatter.format(input,variables));
  }

  /* 
  * This method will return the generated code.
  */
  public String getCode(UmpleModel model, UmpleElement uElement)
  {
    return "";
  }


    // TODO: Replace <lastFunctionName> with the name of the function that is above this. Replace arguments as well.
        // That function can be removed
    emit <lastFunctionName>(arguments...)(phpInterfaceGenerator);


    phpInterfaceGenerator <<!<</*phpInterfaceGenerator*/>><<#
  UmpleInterface uInterface = (UmpleInterface) uElement;
  // GeneratedInterface gInterface = uInterface.getGeneratedInterface();
  PhpGenerator gen = new PhpGenerator();
  gen.setModel(model);
  
  String extraCode = "";
  if (uInterface.getExtraCode() != null)
  {
    extraCode = uInterface.getExtraCode();
  }  
#>>
<?php<<@ UnitTest.UmpleNotice >>

interface <<= uInterface.getName() >>
{
<<# if (uInterface.hasConstants()) { #>><<@ UnitTest.interface_constantDeclaration >>
<<# } #>>
 <<# if (uInterface.hasMethods()) { #>><<@ UnitTest.interface_AbstractMethodDeclaration >>
<<# } #>>
  <<=extraCode>>
}
?>!>>
}