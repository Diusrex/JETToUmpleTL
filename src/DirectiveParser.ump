namespace cruise.umple.fromjet;

use Constants.ump;


class DirectiveParser {
    depend java.util.*;
    
    String firstLine;
    immutable boolean isValid = true;
    
    
    lazy immutable String directivePackage;
    lazy immutable String generatedClass;
    lazy immutable String skeleton;
    immutable String[] directiveImports = null;
    
    after constructor {
        // Parse the directive
        parseJetDirective();
    }
    
    
    // JET files need to start with the directive. So if they don't will just ignore it
    // Assumes that the directive is contained on one line
    // Note that this is not correct, and should be fixed in issue #8
    private void parseJetDirective() {
        if (!firstLine.startsWith(JETConstants.DirectiveStart)) {
            isValid = false;
            return;
        }
        
        int endIndex = firstLine.indexOf(JETConstants.DirectiveEnd);
        
        if (endIndex == -1) {
            isValid = false;
            return;
        }
        
        String directive = firstLine.substring(JETConstants.DirectiveStart.length(), endIndex);
        
        
        directivePackage = parseArgument(directive, "package");
        generatedClass = parseArgument(directive, "class");
        skeleton = parseArgument(directive, "skeleton");
        
        String importsArg = parseArgument(directive, "imports");
        if (!importsArg.equals("")) {
            directiveImports = Arrays.asList(importsArg.split(" "));
        } else {
            directiveImports = new ArrayList<>();
        }
    }
    
    private String parseArgument(String directive, String argument) {
        String completeElementSearch = argument + "=\"";
        int start = directive.indexOf(completeElementSearch);
        
        if (start != -1) {
            start += completeElementSearch.length();
            
            // Want to cut from the =" to the next "
            int end = directive.indexOf("\"", start);
            return directive.substring(start, end);
            
        } else {
            return "";
        }
    }
}