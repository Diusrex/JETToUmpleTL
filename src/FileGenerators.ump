namespace cruise.umple.fromjet;

class FileGenerators {
    depend java.util.*;
    
    // compiledTemplates should be all of the templates that are top files
    // Most likely just .jumpjet files
    emit generateMasterUmpFile(List<String> compiledTemplates)(generateMasterUmpFile);
    
    generateMasterUmpFile <<!// TODO: Choose path
generate Java "path"

<<# for (String template : compiledTemplates) {#>>
use <<=template>>.ump;
<<#}#>>!>>

    emit generateClassFileDependencies(List<String> dependencies)(generateClassFileDependencies);
    
    generateClassFileDependencies <<!<<# for (String dependency : dependencies) {#>>
use <<=dependency>>.ump;
<<# }
    if (dependencies.size() != 0) { // Add blank lines#>>


<<# } #>>!>>

    emit generateTemplateClassAndImports(DirectiveParser parsedData, String className)(generateTemplateClassAndImports);
    
    generateTemplateClassAndImports <<!class <<=className>> {
<<# for (String dependency : parsedData.getDirectiveImports()) { #>>
    depend <<= dependency>>;
<<# }
    if (parsedData.getDirectiveImports().length != 0) { // Add blank lines#>>


<<# } #>>!>>

    emit generateIncludeAndExtendExternal(List<String> interfaces, List<String> classesExtends)(generateIncludeAndExtendExternal);
    
    generateIncludeAndExtendExternal <<!<<# for (String currentInterface : interfaces) { #>>
external interface <<=currentInterface>> {}
<<# }
    for (String classExtend : classesExtends) { #>>
external <<=classExtend>> {}
<<# }
    if (interfaces.size() != 0 || classesExtends.size() != 0) { // Add blank lines#>>


<<# } #>>!>>

    emit generateIncludeOrExtendInsideClass(List<String> interfaces, List<String> classesExtends)(generateIncludeOrExtendWarning);
    
    generateIncludeOrExtendWarning <<!<<# for (String currentInterface : interfaces) { #>>
    isA <<=currentInterface>>;
<<# }
    for (String classExtend : classesExtends) { #>>
    isA <<=classExtend>>;
<<# }
    if (interfaces.size() != 0 || classesExtends.size() != 0) { // Add blank line#>>

<<# } #>>!>>

!>>


emit generateRestOfTemplate(String templateName, String templateText, boolean isMainTemplate)(generateRestOfTemplate);

    generateRestOfTemplate <<!<<# if (isMainTemplate) { #>>

    // TODO: Replace <lastFunctionName> with the name of the function that is above this. Replace arguments as well.
        // That function can be removed
    emit <lastFunctionName>(arguments...)(<<=templateName>>);


<<#    } #>>
    <<=templateName>> <<=templateText>>
}!>>

    //emit defaultSkeleton() {
    //public class CLASS\n{\n public String generate(Object argument)\n {\n return \"\";\n }\n}\n
    //}
}